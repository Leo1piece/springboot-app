pipeline {
    tools {
        maven 'Maven3'
    }
    agent any
        environment {
        //once you create ACR in Azure cloud, use that here
        registryName = "careeraiacr"
        //- update your credentials ID after creating credentials for connecting to ACR
        registryCredential = 'ACR'
        dockerImage = ''
        registryUrl = 'careeraiacr.azurecr.io'
    }

    stages {
        stage('checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Leo1piece/springboot-app.git']])
             // checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'check_out_from_your_repo_after_forking_my_repo']]])
            }
        }
        stage ('Build') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage ('Build Docker image') {
            steps {
                    script {
                        dockerImage = docker.build registryName
                    }
                }
            }
    // Uploading Docker images into ACR
        stage('Upload Image to ACR') {
            steps{   
                    script {
                        docker.withRegistry( "http://${registryUrl}", registryCredential ) {
                        dockerImage.push()
                        }
                    }
            }
        }
        
        stage ('K8S Deploy') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'K8S', serverUrl: '']) {
                    sh ('kubectl apply -f  jenkins-aks-deploy-from-acr.yaml')
                    }
                }
            }
        }
    }
    post {
        failure {
                slackSend channel: 'careerai',
                message:"backend UAT build, ${BUILD_NUMBER} failed"
                emailext(attachLog:true, body:'failed', subject:'backend uat build failed', to:'applesama567@gmail.com')
                echo "your backend number ${BUILD_NUMBER} build failed"
        }

        success {
                slackSend channel: 'careerai',
                message:"backend UAT build, ${BUILD_NUMBER} succeed"
                emailext(attachLog:true, body:'succeed', subject:'backend uat build succeed', to:'applesama567@gmail.com')
                echo "your backend number ${BUILD_NUMBER} build succeed"
        }
        always {
            cleanWs()
            sh 'docker rmi $(docker images -q) --force || true'
        }
    }

    

}